// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/cursos.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CursosProtoService_GetCursoByID_FullMethodName    = "/cursos.CursosProtoService/GetCursoByID"
	CursosProtoService_CheckUserAccess_FullMethodName = "/cursos.CursosProtoService/CheckUserAccess"
	CursosProtoService_SayHi_FullMethodName           = "/cursos.CursosProtoService/SayHi"
)

// CursosProtoServiceClient is the client API for CursosProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CursosProtoServiceClient interface {
	GetCursoByID(ctx context.Context, in *GetCursoRequest, opts ...grpc.CallOption) (*GetCursoResponse, error)
	CheckUserAccess(ctx context.Context, in *CursoAccessRequest, opts ...grpc.CallOption) (*CursoAccessResponse, error)
	SayHi(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (*HiResponse, error)
}

type cursosProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCursosProtoServiceClient(cc grpc.ClientConnInterface) CursosProtoServiceClient {
	return &cursosProtoServiceClient{cc}
}

func (c *cursosProtoServiceClient) GetCursoByID(ctx context.Context, in *GetCursoRequest, opts ...grpc.CallOption) (*GetCursoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCursoResponse)
	err := c.cc.Invoke(ctx, CursosProtoService_GetCursoByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cursosProtoServiceClient) CheckUserAccess(ctx context.Context, in *CursoAccessRequest, opts ...grpc.CallOption) (*CursoAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CursoAccessResponse)
	err := c.cc.Invoke(ctx, CursosProtoService_CheckUserAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cursosProtoServiceClient) SayHi(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (*HiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HiResponse)
	err := c.cc.Invoke(ctx, CursosProtoService_SayHi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CursosProtoServiceServer is the server API for CursosProtoService service.
// All implementations must embed UnimplementedCursosProtoServiceServer
// for forward compatibility.
type CursosProtoServiceServer interface {
	GetCursoByID(context.Context, *GetCursoRequest) (*GetCursoResponse, error)
	CheckUserAccess(context.Context, *CursoAccessRequest) (*CursoAccessResponse, error)
	SayHi(context.Context, *HiRequest) (*HiResponse, error)
	mustEmbedUnimplementedCursosProtoServiceServer()
}

// UnimplementedCursosProtoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCursosProtoServiceServer struct{}

func (UnimplementedCursosProtoServiceServer) GetCursoByID(context.Context, *GetCursoRequest) (*GetCursoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCursoByID not implemented")
}
func (UnimplementedCursosProtoServiceServer) CheckUserAccess(context.Context, *CursoAccessRequest) (*CursoAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAccess not implemented")
}
func (UnimplementedCursosProtoServiceServer) SayHi(context.Context, *HiRequest) (*HiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedCursosProtoServiceServer) mustEmbedUnimplementedCursosProtoServiceServer() {}
func (UnimplementedCursosProtoServiceServer) testEmbeddedByValue()                            {}

// UnsafeCursosProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CursosProtoServiceServer will
// result in compilation errors.
type UnsafeCursosProtoServiceServer interface {
	mustEmbedUnimplementedCursosProtoServiceServer()
}

func RegisterCursosProtoServiceServer(s grpc.ServiceRegistrar, srv CursosProtoServiceServer) {
	// If the following call pancis, it indicates UnimplementedCursosProtoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CursosProtoService_ServiceDesc, srv)
}

func _CursosProtoService_GetCursoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCursoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CursosProtoServiceServer).GetCursoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CursosProtoService_GetCursoByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CursosProtoServiceServer).GetCursoByID(ctx, req.(*GetCursoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CursosProtoService_CheckUserAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CursoAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CursosProtoServiceServer).CheckUserAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CursosProtoService_CheckUserAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CursosProtoServiceServer).CheckUserAccess(ctx, req.(*CursoAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CursosProtoService_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CursosProtoServiceServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CursosProtoService_SayHi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CursosProtoServiceServer).SayHi(ctx, req.(*HiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CursosProtoService_ServiceDesc is the grpc.ServiceDesc for CursosProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CursosProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cursos.CursosProtoService",
	HandlerType: (*CursosProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCursoByID",
			Handler:    _CursosProtoService_GetCursoByID_Handler,
		},
		{
			MethodName: "CheckUserAccess",
			Handler:    _CursosProtoService_CheckUserAccess_Handler,
		},
		{
			MethodName: "SayHi",
			Handler:    _CursosProtoService_SayHi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cursos.proto",
}
